/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package noticias.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import noticias.sb.model.Noticia;
import noticias.sb.model.NoticiaModel;
import noticias.sb.model.NoticiaSoap;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Noticia service. Represents a row in the &quot;EDA_Noticia&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>NoticiaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NoticiaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NoticiaImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class NoticiaModelImpl
	extends BaseModelImpl<Noticia> implements NoticiaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a noticia model instance should use the <code>Noticia</code> interface instead.
	 */
	public static final String TABLE_NAME = "EDA_Noticia";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"noticiaId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"titulo", Types.VARCHAR}, {"descricao", Types.VARCHAR},
		{"documentId", Types.BIGINT}, {"fileUrl", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noticiaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("titulo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descricao", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileUrl", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EDA_Noticia (uuid_ VARCHAR(75) null,noticiaId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,titulo VARCHAR(75) null,descricao VARCHAR(75) null,documentId LONG,fileUrl VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table EDA_Noticia";

	public static final String ORDER_BY_JPQL =
		" ORDER BY noticia.noticiaId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EDA_Noticia.noticiaId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long NOTICIAID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Noticia toModel(NoticiaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Noticia model = new NoticiaImpl();

		model.setUuid(soapModel.getUuid());
		model.setNoticiaId(soapModel.getNoticiaId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitulo(soapModel.getTitulo());
		model.setDescricao(soapModel.getDescricao());
		model.setDocumentId(soapModel.getDocumentId());
		model.setFileUrl(soapModel.getFileUrl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Noticia> toModels(NoticiaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Noticia> models = new ArrayList<Noticia>(soapModels.length);

		for (NoticiaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public NoticiaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _noticiaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNoticiaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _noticiaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Noticia.class;
	}

	@Override
	public String getModelClassName() {
		return Noticia.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Noticia, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Noticia, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Noticia, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Noticia)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Noticia, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Noticia, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Noticia)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Noticia, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Noticia, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Noticia>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Noticia.class.getClassLoader(), Noticia.class, ModelWrapper.class);

		try {
			Constructor<Noticia> constructor =
				(Constructor<Noticia>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Noticia, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Noticia, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Noticia, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Noticia, Object>>();
		Map<String, BiConsumer<Noticia, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Noticia, ?>>();

		attributeGetterFunctions.put("uuid", Noticia::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Noticia, String>)Noticia::setUuid);
		attributeGetterFunctions.put("noticiaId", Noticia::getNoticiaId);
		attributeSetterBiConsumers.put(
			"noticiaId", (BiConsumer<Noticia, Long>)Noticia::setNoticiaId);
		attributeGetterFunctions.put("userId", Noticia::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Noticia, Long>)Noticia::setUserId);
		attributeGetterFunctions.put("userName", Noticia::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Noticia, String>)Noticia::setUserName);
		attributeGetterFunctions.put("createDate", Noticia::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Noticia, Date>)Noticia::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Noticia::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Noticia, Date>)Noticia::setModifiedDate);
		attributeGetterFunctions.put("titulo", Noticia::getTitulo);
		attributeSetterBiConsumers.put(
			"titulo", (BiConsumer<Noticia, String>)Noticia::setTitulo);
		attributeGetterFunctions.put("descricao", Noticia::getDescricao);
		attributeSetterBiConsumers.put(
			"descricao", (BiConsumer<Noticia, String>)Noticia::setDescricao);
		attributeGetterFunctions.put("documentId", Noticia::getDocumentId);
		attributeSetterBiConsumers.put(
			"documentId", (BiConsumer<Noticia, Long>)Noticia::setDocumentId);
		attributeGetterFunctions.put("fileUrl", Noticia::getFileUrl);
		attributeSetterBiConsumers.put(
			"fileUrl", (BiConsumer<Noticia, String>)Noticia::setFileUrl);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getNoticiaId() {
		return _noticiaId;
	}

	@Override
	public void setNoticiaId(long noticiaId) {
		_noticiaId = noticiaId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitulo() {
		if (_titulo == null) {
			return "";
		}
		else {
			return _titulo;
		}
	}

	@Override
	public void setTitulo(String titulo) {
		_titulo = titulo;
	}

	@JSON
	@Override
	public String getDescricao() {
		if (_descricao == null) {
			return "";
		}
		else {
			return _descricao;
		}
	}

	@Override
	public void setDescricao(String descricao) {
		_descricao = descricao;
	}

	@JSON
	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		_documentId = documentId;
	}

	@JSON
	@Override
	public String getFileUrl() {
		if (_fileUrl == null) {
			return "";
		}
		else {
			return _fileUrl;
		}
	}

	@Override
	public void setFileUrl(String fileUrl) {
		_fileUrl = fileUrl;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Noticia.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Noticia toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NoticiaImpl noticiaImpl = new NoticiaImpl();

		noticiaImpl.setUuid(getUuid());
		noticiaImpl.setNoticiaId(getNoticiaId());
		noticiaImpl.setUserId(getUserId());
		noticiaImpl.setUserName(getUserName());
		noticiaImpl.setCreateDate(getCreateDate());
		noticiaImpl.setModifiedDate(getModifiedDate());
		noticiaImpl.setTitulo(getTitulo());
		noticiaImpl.setDescricao(getDescricao());
		noticiaImpl.setDocumentId(getDocumentId());
		noticiaImpl.setFileUrl(getFileUrl());

		noticiaImpl.resetOriginalValues();

		return noticiaImpl;
	}

	@Override
	public int compareTo(Noticia noticia) {
		long primaryKey = noticia.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Noticia)) {
			return false;
		}

		Noticia noticia = (Noticia)obj;

		long primaryKey = noticia.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		NoticiaModelImpl noticiaModelImpl = this;

		noticiaModelImpl._originalUuid = noticiaModelImpl._uuid;

		noticiaModelImpl._setModifiedDate = false;

		noticiaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Noticia> toCacheModel() {
		NoticiaCacheModel noticiaCacheModel = new NoticiaCacheModel();

		noticiaCacheModel.uuid = getUuid();

		String uuid = noticiaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			noticiaCacheModel.uuid = null;
		}

		noticiaCacheModel.noticiaId = getNoticiaId();

		noticiaCacheModel.userId = getUserId();

		noticiaCacheModel.userName = getUserName();

		String userName = noticiaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			noticiaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			noticiaCacheModel.createDate = createDate.getTime();
		}
		else {
			noticiaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			noticiaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			noticiaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		noticiaCacheModel.titulo = getTitulo();

		String titulo = noticiaCacheModel.titulo;

		if ((titulo != null) && (titulo.length() == 0)) {
			noticiaCacheModel.titulo = null;
		}

		noticiaCacheModel.descricao = getDescricao();

		String descricao = noticiaCacheModel.descricao;

		if ((descricao != null) && (descricao.length() == 0)) {
			noticiaCacheModel.descricao = null;
		}

		noticiaCacheModel.documentId = getDocumentId();

		noticiaCacheModel.fileUrl = getFileUrl();

		String fileUrl = noticiaCacheModel.fileUrl;

		if ((fileUrl != null) && (fileUrl.length() == 0)) {
			noticiaCacheModel.fileUrl = null;
		}

		return noticiaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Noticia, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Noticia, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Noticia, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Noticia)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Noticia, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Noticia, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Noticia, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Noticia)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Noticia>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _noticiaId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _titulo;
	private String _descricao;
	private long _documentId;
	private String _fileUrl;
	private long _columnBitmask;
	private Noticia _escapedModel;

}